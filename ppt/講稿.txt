各位口試委員好我是__，我今天要報告的題目是，
使用大型語言模型進行機器控制指令的自動化生成
Automated Generation of Machine Control Commands Using Large Language Models

那這是我的報告大綱，內容包含研究動機與目的、背景知識與相關研究、研究方法、實驗設計以及成果、結論與未來展望，

#研究動機
首先我們先來看研究動機，今年來，隨著高效能運算技術HPC的高度發展，我們身處在了一個電腦算力相當強大的時代，
而在2022年底推出的第一個大型語言模型Chat-gpt，已經深刻改變了我們對於人工智慧認知。

在兩年不到的時間，由於這些模型的需求不斷增長，也促使了各大科技公司不斷投入資源，提供更加強大且多樣化的大型語言模型，使的人工智慧發展方向更加明朗。

#而在這兩年的碩士生活中，我也常常使用Chat-gpt來解決我在日常課業中的各種程式相關的問題，因為我是資工系的，
而本實驗看到了大型語言模型在自動程式碼生成領域的可能性，

加上目前許多研究集中於微調大型語言模型本身，以提升其在各個任務中的準確度與效能。

所以我希望以此為出發點，能做出一套系統，讓使用者說出的自然語言指令透過語言模型轉換為程式碼，
進而去控制其他硬體設備，使得使用者能夠以更加直觀和自然的方式與機器進行互動。

#研究目的
再來是研究目的，本研究預計達到以下目標，

第一是能做出一套系統，讓使用者能用自然語言控制機器。
第二是驗證將自然語言指令轉換為程式碼的可行性和實際效果。
第三是自己組機器，並使用3D列印技術實現更客製化的機器製作。
第四是分析和評估此系統在不同應用場景下的實際效果和應用價值。
第五則是提供相關技術和方法的研究成果，為自然語言控制機器的相關研究和應用提供實證基礎和技術範本。

簡單來說就是我想先自己組機器，然後自己開發對應的驅動系統，
再把這個控制系統和大型語言模型串聯起來，讓大型語言模型擁有機器的控制權，
然後對語言模型下命令，看語言模型能不能控制機器。

最後再來評估他做得好不好，這樣，簡單來說這篇論文就是在做這幾件事情。

#背景知識與相關研究
接下來講背景知識與相關研究，
首先是背景知識的部分，由於實驗涵蓋了語言模型、機器製作和3D列印這三個相差較多的領域，所以我會分別介紹一下這些領域的發展現況，

先來介紹大型語言模型的研究現況，我這邊簡單列出了一些關於語言模型研究的里程碑，
從早期階段，在類神經網路推出以前，都是使用統計方法來做語言處理，
直到大約2000年左右，才慢慢開始出現了使用類神經網路進行語言處理的研究，
像比較著名的模型概念RNN、LSTM等，都歸類於這個時期，

接下來由於Transformer模型的推出，自然語言處理領域獲得了重大的突破，
最大的改變來自於這個自注意機制（Self-Attention），
自注意機制允許模型在處理每個詞彙時，同時關注整個輸入序列中的所有其他詞彙，
相比於傳統的回歸神經網絡（RNN）和長短期記憶網絡（LSTM），
自注意機制更善於理解整篇文本的語境，而不僅僅依賴於鄰近詞彙。

而在這之後，BERT之後的模型基本上都使用了上述的Transformer架構，
BERT是一個雙向Transformer模型，
LLM如果以chat-GPT為範例的話，他是一個參數量更多的Transformer模型，
而現今的人工智慧技術不僅能夠處理文本資訊，還可以處理如圖像、音訊、影片等多種模式。

再來是智慧機器與人工智慧物聯網的應用場景
以下這三個例子是目前智慧機器與AIOT的幾個比較常見的應用方向，
工業 4.0 (Industry 4.0)中注重的人工智慧和物聯網技術是生產過程自動化和智能化的核心。
無人搬運車 (Automated Guided Vehicle, AGV)透過自動運送物品和導航與路徑規劃減少了人工操作失誤，提高了整體管理效率。
手術機器人則是AIOT在醫療保健中一個典型的例子。
然後這邊是圖片
這邊主要帶過一下目前市面上的機器大概是什麼樣子。

在來是3D列印技術的發展現況，
受惠於CAD、CAM、CNC這些建模加工技術的蓬勃發展，像3D列印這種通過電腦控制，
將材料進行堆疊加工，生成立體實品的積層製造技術，已經相當純熟。
我們現在已經可以用相對地廉的價格購買品質不錯的設備與原料來設計機器模型，
而現今的3D列印技術已被廣泛應用於建築、工業設計、汽車、航太、飾品等眾多領域。

這邊是一些應用的範例照片。

接下來是文獻回顧，這個章節一樣會針對語言模型、機器控制和3D列印這三個領域引用一些相關的文獻來印證實驗的可行性，
首先是大型語言模型及其在程式碼生成與機器控制上的應用的相關文獻

首先是Vaithilingam等人探討大型語言模型作為程式碼生成工具的可用性 的相關研究，
他們招募了24名擁有不同程式設計經驗的參與者使用Copilot(一個以大型語言模型為基礎的程式生成工具)執行一系列不同難度的程式設計任務，
而實驗結果表示大多數參與者都喜歡在進行程式設計時使用 Copilot，因為它能夠提供一個有用的起點，讓使用者能節省許多思考與搜索的時間。

所以這邊論文能夠應證，我們能夠以文字形式將程式需求傳給大型語言模型來自動產生程式碼，不過程式碼通常沒辦法直接使用，需要經過人為修改。

接下來是Sai 等人探討ChatGPT在機器人應用中的實驗研究，
他們提出了一種策略，讓ChatGPT能透過與人對話、解析XML標記以及合成程式碼，來控制機器，
研究中提供了一個名為 PromptCraft 的開源研究工具，其中包含一個平台，研究人員可以共同上傳並投票選出最優的對話策略。
這個實驗將大型語言模型與機器人領域結合，不過由於重點在於研究對話策略，實驗中需要較長的對話過程逐步修正。

接下來是Liang 等人使用大型語言模型直接生成可以作為控制機器人策略的程式 的相關研究。
研究中提出了名為「程式即為策略」（Code as Policies）的方法，省去了重複對話的過程。
而實驗結果顯示使用大型語言模型生成的程式碼，在某些實驗中的確可以成功地控制機器人執行各種指令，
不過隨著任務難度的複雜化，現今大型語言模型在語意推理和空間幾何推理領域的發揮是有限的。

接下來是運動學研究與機器人控制的相關研究，
由於我在研究中使用的機器、驅動馬達的開發版和相關的運動學驅動程式都是我自己設計、組合、開發的，
並不是購買市面上現成的可開發設備，所以這邊稍微提及我在開發運動學使用的公式來源，

運動學問題是指機械臂控制時，馬達角度與操作點座標的雙向轉換公式。
順向運動學即為順著機械臂的每個關節，透過計算每個關節角度來得出機械臂末端的位置。
逆向運動學則是順向運動學的反向問題。它試圖根據機械臂末端的位置，計算出每個關節應該轉動的角度。

那Denavit-Hartenberg 方法為本研究使用的順向運動學計算方式，由於時間有限，這邊就放上公式最後的結論，
詳細推導可以參考我的論文章節，這個算法的特色是能構造出每個連桿之間的齊次變換矩陣，像是從力臂的這裡到這裡能推一個矩陣...最後成起來就能得到頂點座標。

那你向運動學的部分，我在實驗中使用了基本的幾何求解法和梯度下降法，這邊依樣放結論，詳細公式推導可以看對應的論文章節，
幾何求解方法的原理是將機械手臂的空間幾何問題分解為多個平面幾何問題，由頂點的角度逆推回基座的角度，
這個算法的好處是精確性高、且計算速度快(由於不涉及迭代過程)。
但是僅適用於幾何結構規則且簡單的機器人。對於結構複雜的機器人，求解會變得困難。

而梯度下降法則是一種基於優化的數值方法，通過最小化目標函數來求解逆運動學問題，
簡單來說可以看畫面上的這個圖，如果我們把現在位置與目標頂點的距離與馬達旋轉角度可視化，
大致能得到像畫面中這樣的曲線圖，所以我們只要通過梯度下降，
與迭代的方式，就能讓機械臂的頂點趨近於目標位置，
和類神經網路的訓練有異曲同工之妙，

這個算法的好處是通用性強，可以處理許多結構複雜的機器，
而缺點是相較於幾何求解法，計算量較大，
而且有可能陷入局部最小值問題，
但這個問題能透過在執行完對應指令後，將機器重製回初始位置來解決。

接下來介紹3D列印應用於機器人製作的相關文獻，
這邊簡單提及比較相關的三個文獻，
像是使用3D列印技術製造可使用的機械手臂，
使用3D列印技術，使用不同材質製造軟體機器人，也稱為仿生機器人，
或是將3D列印技術與智慧機器相結合，提出一種創新的大規模3D列印方法。

那這邊是這些文獻的相關圖片，
這些參考文獻都為了本實驗的可行性打下了堅實的基礎。

#研究方法
那接下來講研究方法，這個章節我會分為硬體設計流程、運動學開發、大型語言模型開發還有最後的系統架構來說明，
首先是硬體設計流程，我會稍微帶過一些設計硬體的細節，
其中包含模型設計使用的軟體，輸出的格式，實驗使用的3D列印機和馬達開發版介紹等，

首先是模型設計的方式，我是用Autodesk Fusion 360作為模型設計程式，由於他是一個多合一的工業設計軟體，包含了CAD、CAM、CAE、PCB等多個功能，
所以實驗中的3D建模、配裝設計、開發版組裝測試、機械結構碰撞測試、設計圖生成我都是使用這個軟體進行。

而檔案輸出格式我則是使用STL格式，由於這個檔案格式較為單純，
不包含材質、顏色等其他3D列印所不需要的屬性，
在執行模型切片時較快速，所以在3D列印領域被廣泛應用。

而3D列印機使用Creality K1 MAX，他的特色是擁有30x30x30公分的大尺寸列印，
且解析度和列印速度都相當不錯，而且支援許多不同種類的耗材，
這台機器也相當的經濟實惠，3萬有找，所以我使用這台機器來列印需要的零件。

接下來介紹硬體中使用到的開發版與馬達，馬達的選擇非常常見，使用SG90、MG90S、MG996R，
特色是輕、便宜、且適合開發，會使用3種馬達主要是為了符合機械臂不同部位的力矩需求，
像SG90因為力矩較小，通常用於機械臂的操作點附近關節，
而MG996R因為力矩較大，通常用於機械臂基座附近的關節。
MG90S則是折衷的選擇。

開發版則使用了ESP32 Doit-Devkit、ESP32-S3-Devkit、 Raspberry Pi 4
三者輕、功能足夠且支援無線連接的特點，
所以我依照了連接的硬體數量，算力需求等條件選用了以下這些開發版，

而驅動模組使用了PCA9685、L298N，
驅動模組主要用於簡化控制流程與彌補針腳不夠的情況，
因為實驗中會在單一開發版上連接多個馬達，甚至增加車輪和相機，
所以需要一些類似的擴充驅動模組。

接下來介紹運動學開發其中會簡單帶過運動學開發的實作細節，
那這是我在實驗中開發的運動學模擬環境，
簡單來說我使用python語言將機械臂定義為一個擁有多個可調整參數的獨立物件，
也做了一個可視化視窗來顯示目前機械臂的移動情況，方便除錯，
而運動學公式則如第二章所述，順向運動問題使用DH方法，
而逆向運動問題使用幾何求解法與梯度下降法來計算，
幾何求解方法主要用於計算運動模式較為簡單的機械臂(二軸路徑規劃)
而梯度下降法則適用於運動較為複雜的機械臂(三軸以上的路徑規劃)。

接下來說明大型語言模型部分的開發，
我使用了open ai所推出的GPT模型作為實驗中使用的語言模型，
因為是由第三方釋出的語言模型，所以在上傳文字與獲得回傳時需要將文字傳輸到open ai api的server，
所以會需要走這個api token的流程，這邊沒什麼特別的。
那比較需要注意的是這裡的參數設定，在上傳文字訊息時，
需要將所需的額外參數以圖上的形式封裝上傳，
所以這邊解釋一下我這邊給了那些參數，
首先這裡是參數說明，
model是模型種類
prompt是指令文字
max_tokens是回傳最大長度
temperature是文字隨機性
top_p是取樣方法，決定生成文本的多樣性(把低概率的詞過濾掉，像閾值)
n回傳生成文章的數量
stop則是停止生成的條件

那我使用的是這些數值。

那最後是我的系統架構圖，
我這裡簡單的畫了一份系統架構圖，
那主要交互的物件有GUI、主要的SERVER、OPEN API(LLM的位置)、和裝載嵌入式系統的機器，
由於現在人工智慧物聯網AIOT是趨勢，所以我在設計機器的時候都將大部分的驅動程式與路徑規畫程式放在了機器的遷入式系統中，
並且皆使用無線網路的方式連接，所以在架構途中特別以這樣表示。

而執行流程如下
GUI 上傳使用者輸入至 Server
Server 上傳使用者輸入至 OpenAI API
OpenAI API 回傳模型輸出至 Server
Server 將輸出傳送至指定的機器
Server 向 GUI 回傳伺服器與機器狀態

接下來是實驗設計以及成果
我一共做了三個實驗，
第一是測試機械臂的基本控制
第二是將機械臂應用於畫圖
第三是將機械臂應用於自動運輸車上

這邊就是展示我在實驗中組裝的機器，與最後的實驗成果，
那我報告的方式都會以這樣的方式進行，先看硬體的設計圖，
再來看驅動函式的設計，再來說明我下了什麼指令，最後展示成果。

那首先這是我第一個實驗建立的模型，在論文中有完整的平面設計圖可以參考，
而使用的硬體種類如畫面上這些，
組合起來基本上就是一個簡易的機械臂，實體在這邊，

那接下來是實驗的函數設計，
首先第一個實驗的目標是讓機械臂能夠成功夾取特定物體，並放置於指定位置。
為了實現這一目標，我寫了一個簡單的路徑規劃程式，如圖所示，
希望利用語言模型在填空方面的優勢，使其生成和編輯機械臂的運動指令。

那這邊是我把指令轉換成json request的範例，
上半部是上一頁寫的程式，下半部是我給的指令，

大意大概是告訴LLM在哪裡有一顆球，在哪裡由一座塔，
請LLM用上面的程式控制機械臂將球放到塔上，然後注意移動時不要撞到塔。
然後這邊是回傳的範例，可以看出LLM已經幫我補全了路徑規劃部分的程式碼，

最後這裡是實驗成果，可以看出效果相當不錯，
並且隨著語言模型技術的發展，路徑規劃的準確率也有顯著的提升。
gpt 4o的成功率能達到9成。

但是以這樣的方式來控制機器缺點也比較明顯，
因為要將整個程式碼放入語言模型的輸入中以生成控制程式碼，
而且要提供大量的前置條件，這種方式實在過於繁瑣，
所以我決定在下個實驗改善這個情況。

那接下來來講第二個實驗，將機械臂用於畫圖。

這是我第二個實驗建立的模型，在論文中有完整的平面設計圖可以參考，
而使用的硬體種類如畫面上這些，
組合起來也是一個簡易的機械臂，實體在這邊，

那接下來是實驗的函數設計，
首先這個實驗的目標是讓機械臂能夠成功拿筆畫畫。
而我在這個實驗中簡化了路徑規劃，使大型語言模型在平面座標內進行規劃，
所以我在運動學虛擬環境中將動作指令簡化成Draw函數，這樣就不需要給予大型語言模型冗長的程式碼。

那這邊是我把指令轉換成json request的範例，
上半部是函數的說明，下半部是我給的指令，
讓他畫我指定的形狀。

然後這邊是回傳的範例，LLM能夠直接回傳對應的動作順序來控制機械臂，
大大縮減了輸入與輸出的文字量，提高了效能，也省了不少錢。

最後這裡是實驗成果，可以看出效果也相當不錯，

這裡是請他畫方形的成果
這裡是請他畫三角形的成果
這裡是請他畫星星的成果

這邊可以看出，使用模組化後的指令控制機器，
不僅大幅減少了輸入和回傳的資料量，同時也保持了不錯的準確率。
所以下一個實驗會繼續以這個方向修正。

那接下來來講第三個實驗，機械臂在自動運輸車上的應用。

這是我第三個實驗建立的模型，在論文中有完整的平面設計圖可以參考，
而使用的硬體種類如畫面上這些，
組合起來也是一個簡易的機械臂，實體在這邊，

那接下來是實驗的函數設計，
這個實驗的目標想測試LLM在控制這樣需要多個設備連動的機器時，效果好不好，
所以我沿用了上一個實驗使用的策略，
將控制函式進行細分，並模組化。
使大型語言模型能通過簡單的模組化指令讓機械臂和車輛能夠協同工作，完成更複雜的任務。

而以下是我歸納的函式，
find(color) 配合相機定位，驅動輪子尋找動應顏色的方塊。
aim(color)配合相機定位，驅動機械臂瞄準對應顏色的方塊。
grab()驅動機械臂，抓取相機正下方的物品。
reset()驅動機械臂，回到初始位置

那這邊是我把指令轉換成json request的範例，
上半部是函數的說明，下半部是我給的指令，
請抓取紅色方塊，然後抓取藍色方塊。

然後這邊是回傳的範例，LLM依然能夠直接回傳對應的動作順序來控制機械臂。
而且依然簡潔有力。

最後這裡是實驗成果，可以看出，
這種方法取得了非常好的成效，顯著提高了控制指令的生成效率和準確性。

但是由於連動的硬體較多，在呼叫控制函式時難免會發生一些機械性的失誤，
代表控制函示需要再進一步優化。

那實驗部分就到此為止
#未來展望
接下來，講未來展望，
首先先說結論，
本實驗嘗試了機械臂在不同場景中的應用，並分析了其中的控制方法和結果。

透過設計機械結構、撰寫控制程式和協調大型語言模型等方式，
成功的展示出了機械臂在基本控制、畫圖和自動運輸車上的應用。

實驗結果發現

使用大型語言模型進行程式碼生成在控制機器上有很大的潛力。
大型語言模型不僅能夠自動生成可執行的控制程式碼，
在擁有良好控制函式的前提下，即使連動較多硬體時也表現出色。

在使用大型語言模型進行機器控制指令的自動化生成為前提下

實驗一：實現了機械臂基本控制，通過給予大型語言模型範例程式，
讓其補全其中缺失的路慶規劃部分，使機械臂能夠精確的完成指定任務。

實驗二：實現了簡單圖形的繪製，通過簡化指令格式和優化控制函數，
展示了此方法在精細操作方面的潛力。

實驗三：實現了機械臂在自動運輸車上的應用，儘管存在一定的機械性失誤，
但通過進一步優化硬體間的協調機制，可以顯著提升系統的穩定性和精確度。

最後是未來展望，我認為本研究的延伸如下：

第一是希望進一步優化機械臂的控制系統，尤其是在硬體協調方面。
透過聯動更多不同的硬體設備，開發更便利的互動方式，
例如通過語音指令直接控制機械臂，使操作更加直觀和方便。

第二是利用 3D 列印技術來製作更多客製化的機械臂及其零部件，
並協調整合更多的硬體設備。快速設計和生產符合特定應用需求的機械臂，
從而滿足不同行業和應用場景的需求。

第三是開發更多模組化的機械臂控制函式庫，這些模組化函式庫將包含多種預先定義的操作和功能，
使得開發者可以輕鬆地構建和定制機械臂的操作流程，進一步提升開發效率和彈性。

以上是我的報告，感謝各位委員的聆聽。
















